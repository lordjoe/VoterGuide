//package com.lordjoe.utilities;
//
//import java.sql.*;
//import java.util.Calendar;
//import java.math.BigDecimal;
//
///**
// * <P>The object used for executing a static SQL statement
// * and obtaining the results produced by it.
// *
// * <P>Only one <code>ResultSet</code> object  per <code>Statement</code> object
// * can be open at any point in
// * time. Therefore, if the reading of one <code>ResultSet</code> object is interleaved
// * with the reading of another, each must have been generated by
// * different <code>Statement</code> objects. All statement <code>execute</code>
// * methods implicitly m_Close a statment's current <code>ResultSet</code> object
// * if an open one exists.
// *
// * @see Connection#createStatement
// * @see ResultSet
// */
//public class StatementProxy
//    /* // Disabled for now
//    implements CallableStatement */
//{
//
//    private Statement m_Statement;
//    private PreparedStatement m_PreparedStatement;
//    private CallableStatement m_CallableStatement;
//    private ConnectionProxy m_ConnectionProxy;
//
//    public StatementProxy() {
//    }
//
//
//    public StatementProxy(ConnectionProxy s) {
//        this();
//        setConnectionProxy(s);
//    }
//
//
//    public Statement getStatement() {
//        return (m_Statement);
//    }
//
//    public void setStatement(Statement s) {
//        m_Statement = s;
//        if (s instanceof PreparedStatement)
//            m_PreparedStatement = (PreparedStatement) s;
//        if (s instanceof CallableStatement)
//            m_CallableStatement = (CallableStatement) s;
//    }
//
//    public ConnectionProxy getConnectionProxy() {
//        return (m_ConnectionProxy);
//    }
//
//    public void setConnectionProxy(ConnectionProxy s) {
//        m_ConnectionProxy = s;
//    }
//
//    /**
//     * Executes an SQL statement that returns a single <code>ResultSet</code> object.
//     *
//     * @param sql typically this is a static SQL <code>SELECT</code> statement
//     * @return a <code>ResultSet</code> object that contains the data produced by the
//     * given query; never <code>null</code>
//     * @exception SQLException if a database access error occurs
//     */
//    public ResultSet executeQuery(String sql) throws SQLException {
//        return (m_Statement.executeQuery(sql));
//    }
//
//    /**
//     * Executes an SQL <code>INSERT</code>, <code>UPDATE</code> or
//     * <code>DELETE</code> statement. In addition,
//     * SQL statements that return nothing, such as SQL DDL statements,
//     * can be executed.
//     *
//     * @param sql an SQL <code>INSERT</code>, <code>UPDATE</code> or
//     * <code>DELETE</code> statement or an SQL statement that returns nothing
//     * @return either the row count for <code>INSERT</code>, <code>UPDATE</code>
//     * or <code>DELETE</code> statements, or 0 for SQL statements that return nothing
//     * @exception SQLException if a database access error occurs
//     */
//    public int executeUpdate(String sql) throws SQLException {
//        return (m_Statement.executeUpdate(sql));
//    }
//
//    /**
//     * Releases this <code>Statement</code> object's database
//     * and JDBC resources immediately instead of waiting for
//     * this to happen when it is automatically closed.
//     * It is generally good practice to release resources as soon as
//     * you are finished with them to avoid tying up database
//     * resources.
//     * <P><B>Note:</B> A <code>Statement</code> object is automatically closed when it is
//     * garbage collected. When a <code>Statement</code> object is closed, its current
//     * <code>ResultSet</code> object, if one exists, is also closed.
//     *
//     * @exception SQLException if a database access error occurs
//     */
//    public void close() throws SQLException {
//        m_Statement.close();
//    }
//
//    //----------------------------------------------------------------------
//
//    /**
//     * Returns the maximum number of bytes allowed
//     * for any column value.
//     * This limit is the maximum number of bytes that can be
//     * returned for any column value.
//     * The limit applies only to <code>BINARY</code>,
//     * <code>VARBINARY</code>, <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>, and <code>LONGVARCHAR</code>
//     * columns.  If the limit is exceeded, the excess data is silently
//     * discarded.
//     *
//     * @return the current max column size limit; zero means unlimited
//     * @exception SQLException if a database access error occurs
//     */
//    public int getMaxFieldSize() throws SQLException {
//        return (m_Statement.getMaxFieldSize());
//    }
//
//    /**
//     * Sets the limit for the maximum number of bytes in a column to
//     * the given number of bytes.  This is the maximum number of bytes
//     * that can be returned for any column value.  This limit applies
//     * only to <code>BINARY</code>, <code>VARBINARY</code>,
//     * <code>LONGVARBINARY</code>, <code>CHAR</code>, <code>VARCHAR</code>, and
//     * <code>LONGVARCHAR</code> fields.  If the limit is exceeded, the excess data
//     * is silently discarded. For maximum portability, use values
//     * greater than 256.
//     *
//     * @param max the new max column size limit; zero means unlimited
//     * @exception SQLException if a database access error occurs
//     */
//    public void setMaxFieldSize(int max) throws SQLException {
//        m_Statement.setMaxFieldSize(max);
//    }
//
//    /**
//     * Retrieves the maximum number of rows that a
//     * <code>ResultSet</code> object can contain.  If the limit is exceeded, the excess
//     * rows are silently dropped.
//     *
//     * @return the current max row limit; zero means unlimited
//     * @exception SQLException if a database access error occurs
//     */
//    public int getMaxRows() throws SQLException {
//        return (m_Statement.getMaxRows());
//    }
//
//    /**
//     * Sets the limit for the maximum number of rows that any
//     * <code>ResultSet</code> object can contain to the given number.
//     * If the limit is exceeded, the excess
//     * rows are silently dropped.
//     *
//     * @param max the new max rows limit; zero means unlimited
//     * @exception SQLException if a database access error occurs
//     */
//    public void setMaxRows(int max) throws SQLException {
//        m_Statement.setMaxRows(max);
//    }
//
//    /**
//     * Sets escape processing on or off.
//     * If escape scanning is on (the default), the driver will do
//     * escape substitution before sending the SQL to the database.
//     *
//     * Note: Since prepared statements have usually been parsed prior
//     * to making this call, disabling escape processing for prepared
//     * statements will have no effect.
//     *
//     * @param enable <code>true</code> to enable; <code>false</code> to disable
//     * @exception SQLException if a database access error occurs
//     */
//    public void setEscapeProcessing(boolean enable) throws SQLException {
//        m_Statement.setEscapeProcessing(enable);
//    }
//
//    /**
//     * Retrieves the number of seconds the driver will
//     * wait for a <code>Statement</code> object to execute. If the limit is exceeded, a
//     * <code>SQLException</code> is thrown.
//     *
//     * @return the current query timeout limit in seconds; zero means unlimited
//     * @exception SQLException if a database access error occurs
//     */
//    public int getQueryTimeout() throws SQLException {
//        return (m_Statement.getQueryTimeout());
//    }
//
//    /**
//     * Sets the number of seconds the driver will
//     * wait for a <code>Statement</code> object to execute to the given number of seconds.
//     * If the limit is exceeded, an <code>SQLException</code> is thrown.
//     *
//     * @param seconds the new query timeout limit in seconds; zero means
//     * unlimited
//     * @exception SQLException if a database access error occurs
//     */
//    public void setQueryTimeout(int seconds) throws SQLException {
//        m_Statement.setQueryTimeout(seconds);
//    }
//
//    /**
//     * Cancels this <code>Statement</code> object if both the DBMS and
//     * driver support aborting an SQL statement.
//     * This method can be used by one thread to cancel a statement that
//     * is being executed by another thread.
//     *
//     * @exception SQLException if a database access error occurs
//     */
//    public void cancel() throws SQLException {
//        m_Statement.cancel();
//    }
//
//    /**
//     * Retrieves the first warning reported by calls on this <code>Statement</code> object.
//     * Subsequent <code>Statement</code> object warnings will be chained to this
//     * <code>SQLWarning</code> object.
//     *
//     * <p>The warning chain is automatically cleared each time
//     * a statement is (re)executed.
//     *
//     * <P><B>Note:</B> If you are processing a <code>ResultSet</code> object, any
//     * warnings associated with reads on that <code>ResultSet</code> object
//     * will be chained on it.
//     *
//     * @return the first <code>SQLWarning</code> object or <code>null</code>
//     * @exception SQLException if a database access error occurs
//     */
//    public SQLWarning getWarnings() throws SQLException {
//        return (m_Statement.getWarnings());
//    }
//
//    /**
//     * Clears all the warnings reported on this <code>Statement</code>
//     * object. After a call to this method,
//     * the method <code>getWarnings</code> will return
//     * <code>null</code> until a new warning is reported for this
//     * <code>Statement</code> object.
//     *
//     * @exception SQLException if a database access error occurs
//     */
//    public void clearWarnings() throws SQLException {
//        m_Statement.clearWarnings();
//    }
//
//    /**
//     * Defines the SQL cursor name that will be used by
//     * subsequent <code>Statement</code> object <code>execute</code> methods.
//     * This name can then be
//     * used in SQL positioned update/delete statements to identify the
//     * current row in the <code>ResultSet</code> object generated by this statement.  If
//     * the database doesn't support positioned update/delete, this
//     * method is a noop.  To insure that a cursor has the proper isolation
//     * level to support updates, the cursor's <code>SELECT</code> statement should be
//     * of the form 'select for update ...'. If the 'for update' phrase is
//     * omitted, positioned updates may fail.
//     *
//     * <P><B>Note:</B> By definition, positioned update/delete
//     * execution must be done by a different <code>Statement</code> object than the one
//     * which generated the <code>ResultSet</code> object being used for positioning. Also,
//     * cursor names must be unique within a connection.
//     *
//     * @param name the new cursor name, which must be unique within
//     *             a connection
//     * @exception SQLException if a database access error occurs
//     */
//    public void setCursorName(String name) throws SQLException {
//        m_Statement.setCursorName(name);
//    }
//
//    //----------------------- Multiple Results --------------------------
//
//    /**
//     * Executes an SQL statement that may return multiple results.
//     * Under some (uncommon) situations a single SQL statement may return
//     * multiple result sets and/or update counts.  Normally you can ignore
//     * this unless you are (1) executing a stored procedure that you know may
//     * return multiple results or (2) you are dynamically executing an
//     * unknown SQL string.  The  methods <code>execute</code>,
//     * <code>getMoreResults</code>, <code>getResultSet</code>,
//     * and <code>getUpdateCount</code> let you navigate through multiple results.
//     *
//     * The <code>execute</code> method executes an SQL statement and indicates the
//     * form of the first result.  You can then use the methods
//     * <code>getResultSet</code> or <code>getUpdateCount</code>
//     * to retrieve the result, and <code>getMoreResults</code> to
//     * move to any subsequent result(s).
//     *
//     * @param sql any SQL statement
//     * @return <code>true</code> if the next result is a <code>ResultSet</code> object;
//     * <code>false</code> if it is an update count or there are no more results
//     * @exception SQLException if a database access error occurs
//     * @see #getResultSet
//     * @see #getUpdateCount
//     * @see #getMoreResults
//     */
//    public boolean execute(String sql) throws SQLException {
//        return (m_Statement.execute(sql));
//    }
//
//    /**
//     *  Returns the current result as a <code>ResultSet</code> object.
//     *  This method should be called only once per result.
//     *
//     * @return the current result as a <code>ResultSet</code> object;
//     * <code>null</code> if the result is an update count or there are no more results
//     * @exception SQLException if a database access error occurs
//     * @see #execute
//     */
//    public ResultSet getResultSet() throws SQLException {
//        return (m_Statement.getResultSet());
//    }
//
//    /**
//     *  Returns the current result as an update count;
//     *  if the result is a <code>ResultSet</code> object or there are no more results, -1
//     *  is returned. This method should be called only once per result.
//     *
//     * @return the current result as an update count; -1 if the current result is a
//     * <code>ResultSet</code> object or there are no more results
//     * @exception SQLException if a database access error occurs
//     * @see #execute
//     */
//    public int getUpdateCount() throws SQLException {
//        return (m_Statement.getUpdateCount());
//    }
//
//    /**
//     * Moves to a <code>Statement</code> object's next result.  It returns
//     * <code>true</code> if this result is a <code>ResultSet</code> object.
//     * This method also implicitly closes any current <code>ResultSet</code>
//     * object obtained with the method <code>getResultSet</code>.
//     *
//     * <P>There are no more results when the following is true:
//     * <PRE>
//     *      <code>(!getMoreResults() && (getUpdateCount() == -1)</code>
//     * </PRE>
//     *
//     * @return <code>true</code> if the next result is a <code>ResultSet</code> object;
//     * <code>false</code> if it is an update count or there are no more results
//     * @exception SQLException if a database access error occurs
//     * @see #execute
//     */
//    public boolean getMoreResults() throws SQLException {
//        return (m_Statement.getMoreResults());
//    }
//
//
//
//    //--------------------------JDBC 2.0-----------------------------
//
//
//    /**
//     * Gives the driver a hint as to the direction in which
//     * the rows in a result set
//     * will be processed. The hint applies only to result sets created
//     * using this <code>Statement</code> object.  The default value is
//     * <code>ResultSet.FETCH_FORWARD</code>.
//     * <p>Note that this method sets the default fetch direction for
//     * result sets generated by this <code>Statement</code> object.
//     * Each result set has its own methods for getting and setting
//     * its own fetch direction.
//     * @param direction the initial direction for processing rows
//     * @exception SQLException if a database access error occurs
//     * or the given direction
//     * is not one of <code>ResultSet.FETCH_FORWARD</code>,
//     * <code>ResultSet.FETCH_REVERSE</code>, or <code>ResultSet.FETCH_UNKNOWN</code>
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setFetchDirection(int direction) throws SQLException {
//        m_Statement.setFetchDirection(direction);
//    }
//
//    /**
//     * Retrieves the direction for fetching rows from
//     * database tables that is the default for result sets
//     * generated from this <code>Statement</code> object.
//     * If this <code>Statement</code> object has not set
//     * a fetch direction by calling the method <code>setFetchDirection</code>,
//     * the return value is implementation-specific.
//     *
//     * @return the default fetch direction for result sets generated
//     *          from this <code>Statement</code> object
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public int getFetchDirection() throws SQLException {
//        return (m_Statement.getFetchDirection());
//    }
//
//    /**
//     * Gives the JDBC driver a hint as to the number of rows that should
//     * be fetched from the database when more rows are needed.  The number
//     * of rows specified affects only result sets created using this
//     * statement. If the value specified is zero, then the hint is ignored.
//     * The default value is zero.
//     *
//     * @param rows the number of rows to fetch
//     * @exception SQLException if a database access error occurs, or the
//     * condition 0 <= rows <= this.getMaxRows() is not satisfied.
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setFetchSize(int rows) throws SQLException {
//        m_Statement.setFetchSize(rows);
//    }
//
//    /**
//     * Retrieves the number of result set rows that is the default
//     * fetch size for result sets
//     * generated from this <code>Statement</code> object.
//     * If this <code>Statement</code> object has not set
//     * a fetch size by calling the method <code>setFetchSize</code>,
//     * the return value is implementation-specific.
//     * @return the default fetch size for result sets generated
//     *          from this <code>Statement</code> object
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public int getFetchSize() throws SQLException {
//        return (m_Statement.getFetchSize());
//    }
//
//    /**
//     * Retrieves the result set concurrency for <code>ResultSet</code> objects
//     * generated by this <code>Statement</code> object.
//     *
//     * @return either <code>ResultSet.CONCUR_READ_ONLY</code> or
//     * <code>ResultSet.CONCUR_UPDATABLE</code>
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public int getResultSetConcurrency() throws SQLException {
//        return (m_Statement.getResultSetConcurrency());
//    }
//
//    /**
//     * Retrieves the result set type for <code>ResultSet</code> objects
//     * generated by this <code>Statement</code> object.
//     *
//     * @return one of <code>ResultSet.TYPE_FORWARD_ONLY</code>,
//     * <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
//     * <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public int getResultSetType() throws SQLException {
//        return (m_Statement.getResultSetType());
//    }
//
//
//    /**
//     * Adds an SQL command to the current batch of commmands for this
//     * <code>Statement</code> object. This method is optional.
//     *
//     * @param sql typically this is a static SQL <code>INSERT</code> or
//     * <code>UPDATE</code> statement
//     * @exception SQLException if a database access error occurs, or the
//     * driver does not support batch statements
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void addBatch(String sql) throws SQLException {
//        m_Statement.addBatch(sql);
//    }
//
//    /**
//     * Makes the set of commands in the current batch empty.
//     * This method is optional.
//     *
//     * @exception SQLException if a database access error occurs or the
//     * driver does not support batch statements
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void clearBatch() throws SQLException {
//        m_Statement.clearBatch();
//    }
//
//    /**
//     * Submits a batch of commands to the database for execution and
//     * if all commands execute successfully, returns an array of update counts.
//     * The <code>int</code> elements of the array that is returned are ordered
//     * to correspond to the commands in the batch, which are ordered
//     * according to the order in which they were added to the batch.
//     * The elements in the array returned by the method <code>executeBatch</code>
//     * may be one of the following:
//     * <OL>
//     * <LI>A number greater than or equal to zero -- indicates that the
//     * command was processed successfully and is an update count giving the
//     * number of rows in the database that were affected by the command's
//     * execution
//     * <LI>A value of <code>-2</code> -- indicates that the command was
//     * processed successfully but that the number of rows affected is
//     * unknown
//     * <P>
//     * If one of the commands in a batch update fails to execute properly,
//     * this method throws a <code>BatchUpdateException</code>, and a JDBC
//     * driver may or may not continue to process the remaining commands in
//     * the batch.  However, the driver's behavior must be consistent with a
//     * particular DBMS, either always continuing to process commands or never
//     * continuing to process commands.  If the driver continues processing
//     * after a failure, the array returned by the method
//     * <code>BatchUpdateException.getUpdateCounts</code>
//     * will contain as many elements as there are commands in the batch, and
//     * at least one of the elements will be the following:
//     * <P>
//     * <LI>A value of <code>-3</code> -- indicates that the command failed
//     * to execute successfully and occurs only if a driver continues to
//     * process commands after a command fails
//     * </OL>
//     * <P>
//     * A driver is not required to implement this method.
//     * The possible implementations and return values have been modified in
//     * the Java 2 SDK, Standard Edition, version 1.3 to
//     * accommodate the option of continuing to proccess commands in a batch
//     * update after a <code>BatchUpdateException</code> obejct has been thrown.
//     *
//     * @return an array of update counts containing one element for each
//     * command in the batch.  The elements of the array are ordered according
//     * to the order in which commands were added to the batch.
//     * @exception SQLException if a database access error occurs or the
//     * driver does not support batch statements. Throws {@link BatchUpdateException}
//     * (a subclass of <code>SQLException</code>) if one of the commands sent to the
//     * database fails to execute properly or attempts to return a result set.
//     * @since 1.3
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public int[] executeBatch() throws SQLException {
//        return (m_Statement.executeBatch());
//    }
//
//    /**
//     * Returns the <code>Connection</code> object
//     * that produced this <code>Statement</code> object.
//     * @return the connection that produced this statement
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//  /*  public Connection getConnection() throws SQLException {
//        return (m_ConnectionProxy);
//    }
//    */
//
//    // +++++++++++++++++++++++++++++++++++++++++++++++++++++
//    // PreparedStatement code
//    // +++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//    /**
//     * A prepared SQL query is executed and its ResultSet is returned.
//     *
//     * @return a ResultSet that contains the data produced by the
//     * query; never null
//     * @exception SQLException if a database-access error occurs.
//     */
//    public ResultSet executeQuery() throws SQLException {
//        return (m_PreparedStatement.executeQuery());
//    }
//
//    /**
//     * Execute a SQL INSERT, UPDATE or DELETE statement. In addition,
//     * SQL statements that return nothing such as SQL DDL statements
//     * can be executed.
//     *
//     * @return either the row count for INSERT, UPDATE or DELETE; or 0
//     * for SQL statements that return nothing
//     * @exception SQLException if a database-access error occurs.
//     */
//    public int executeUpdate() throws SQLException {
//        return (m_PreparedStatement.executeUpdate());
//    }
//
//     /**
//     * Set a parameter to SQL NULL.
//     *
//     * <P><B>Note:</B> You must specify the parameter's SQL type.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param sqlType SQL type code defined by java.sql.Types
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setNull(int parameterIndex, int sqlType) throws SQLException {
//        m_PreparedStatement.setNull(parameterIndex, sqlType);
//    }
//
//    /**
//     * Set a parameter to a Java boolean value.  The driver converts this
//     * to a SQL BIT value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setBoolean(int parameterIndex, boolean x) throws SQLException {
//        m_PreparedStatement.setBoolean(parameterIndex, x);
//    }
//
//    /**
//     * Set a parameter to a Java byte value.  The driver converts this
//     * to a SQL TINYINT value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setByte(int parameterIndex, byte x) throws SQLException {
//        m_PreparedStatement.setByte(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a Java short value.  The driver converts this
//     * to a SQL SMALLINT value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setShort(int parameterIndex, short x) throws SQLException {
//        m_PreparedStatement.setShort(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a Java int value.  The driver converts this
//     * to a SQL INTEGER value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setInt(int parameterIndex, int x) throws SQLException {
//        m_PreparedStatement.setInt(parameterIndex, x);
//    }
//
//    /**
//     * Set a parameter to a Java long value.  The driver converts this
//     * to a SQL BIGINT value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setLong(int parameterIndex, long x) throws SQLException {
//        m_PreparedStatement.setLong(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a Java float value.  The driver converts this
//     * to a SQL FLOAT value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setFloat(int parameterIndex, float x) throws SQLException {
//        m_PreparedStatement.setFloat(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a Java double value.  The driver converts this
//     * to a SQL DOUBLE value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setDouble(int parameterIndex, double x) throws SQLException {
//        m_PreparedStatement.setDouble(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a java.lang.BigDecimal value.
//     * The driver converts this to a SQL NUMERIC value when
//     * it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
//        m_PreparedStatement.setBigDecimal(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a Java String value.  The driver converts this
//     * to a SQL VARCHAR or LONGVARCHAR value (depending on the arguments
//     * size relative to the driver's limits on VARCHARs) when it sends
//     * it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setString(int parameterIndex, String x) throws SQLException {
//        m_PreparedStatement.setString(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a Java array of bytes.  The driver converts
//     * this to a SQL VARBINARY or LONGVARBINARY (depending on the
//     * argument's size relative to the driver's limits on VARBINARYs)
//     * when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setBytes(int parameterIndex, byte x[]) throws SQLException {
//        m_PreparedStatement.setBytes(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a java.sql.Date value.  The driver converts this
//     * to a SQL DATE value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setDate(int parameterIndex, java.sql.Date x)
//            throws SQLException {
//        m_PreparedStatement.setDate(parameterIndex, x);
//    }
//
//    /**
//     * Set a parameter to a java.sql.Time value.  The driver converts this
//     * to a SQL TIME value when it sends it to the database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setTime(int parameterIndex, java.sql.Time x)
//            throws SQLException {
//        m_PreparedStatement.setTime(parameterIndex, x);
//    }
//
//
//    /**
//     * Set a parameter to a java.sql.Timestamp value.  The driver
//     * converts this to a SQL TIMESTAMP value when it sends it to the
//     * database.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setTimestamp(int parameterIndex, java.sql.Timestamp x)
//            throws SQLException {
//        m_PreparedStatement.setTimestamp(parameterIndex, x);
//    }
//
//
//    /**
//     * When a very large ASCII value is input to a LONGVARCHAR
//     * parameter, it may be more practical to send it via a
//     * java.io.InputStream. JDBC will read the data from the stream
//     * as needed, until it reaches end-of-file.  The JDBC driver will
//     * do any necessary conversion from ASCII to the database char format.
//     *
//     * <P><B>Note:</B> This stream object can either be a standard
//     * Java stream object or your own subclass that implements the
//     * standard interface.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the java input stream which contains the ASCII parameter value
//     * @param length the number of bytes in the stream
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setAsciiStream(int parameterIndex, java.io.InputStream x, int length)
//            throws SQLException {
//        m_PreparedStatement.setAsciiStream(parameterIndex, x, length);
//    }
//
//
//    /**
//     * When a very large UNICODE value is input to a LONGVARCHAR
//     * parameter, it may be more practical to send it via a
//     * java.io.InputStream. JDBC will read the data from the stream
//     * as needed, until it reaches end-of-file.  The JDBC driver will
//     * do any necessary conversion from UNICODE to the database char format.
//     *
//     * <P><B>Note:</B> This stream object can either be a standard
//     * Java stream object or your own subclass that implements the
//     * standard interface.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the java input stream which contains the
//     * UNICODE parameter value
//     * @param length the number of bytes in the stream
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setUnicodeStream(int parameterIndex, java.io.InputStream x, int length)
//            throws SQLException {
//        m_PreparedStatement.setUnicodeStream(parameterIndex, x, length);
//    }
//
//
//    /**
//     * When a very large binary value is input to a LONGVARBINARY
//     * parameter, it may be more practical to send it via a
//     * java.io.InputStream. JDBC will read the data from the stream
//     * as needed, until it reaches end-of-file.
//     *
//     * <P><B>Note:</B> This stream object can either be a standard
//     * Java stream object or your own subclass that implements the
//     * standard interface.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the java input stream which contains the binary parameter value
//     * @param length the number of bytes in the stream
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setBinaryStream(int parameterIndex, java.io.InputStream x, int length)
//            throws SQLException {
//        m_PreparedStatement.setBinaryStream(parameterIndex, x, length);
//    }
//
//
//    /**
//     * <P>In general, parameter values remain in force for repeated use of a
//     * Statement. Setting a parameter value automatically clears its
//     * previous value.  However, in some cases it is useful to immediately
//     * release the resources used by the current parameter values; this can
//     * be done by calling clearParameters.
//     *
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void clearParameters() throws SQLException {
//        m_PreparedStatement.clearParameters();
//    }
//
//
//    //----------------------------------------------------------------------
//    // Advanced features:
//
//    /**
//     * <p>Set the value of a parameter using an object; use the
//     * java.lang equivalent objects for integral values.
//     *
//     * <p>The given Java object will be converted to the targetSqlType
//     * before being sent to the database.
//     *
//     * <p>Note that this method may be used to pass datatabase-
//     * specific abstract data types. This is done by using a Driver-
//     * specific Java type and using a targetSqlType of
//     * java.sql.types.OTHER.
//     *
//     * @param parameterIndex The first parameter is 1, the second is 2, ...
//     * @param x The object containing the input parameter value
//     * @param targetSqlType The SQL type (as defined in java.sql.Types) to be
//     * sent to the database. The scale argument may further qualify this type.
//     * @param scale For java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types
//     *          this is the number of digits after the decimal.  For all other
//     *          types this value will be ignored,
//     * @exception SQLException if a database-access error occurs.
//     * @see Types
//     */
//    public void setObject(int parameterIndex, Object x, int targetSqlType, int scale)
//              throws SQLException {
//          m_PreparedStatement.setObject(parameterIndex, x, targetSqlType, scale);
//      }
//
//
//
//    /**
//     * This method is like setObject above, but assumes a scale of zero.
//     *
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
//        m_PreparedStatement.executeUpdate();
//    }
//
//
//    /**
//     * <p>Set the value of a parameter using an object; use the
//     * java.lang equivalent objects for integral values.
//     *
//     * <p>The JDBC specification specifies a standard mapping from
//     * Java Object types to SQL types.  The given argument java object
//     * will be converted to the corresponding SQL type before being
//     * sent to the database.
//     *
//     * <p>Note that this method may be used to pass datatabase
//     * specific abstract data types, by using a Driver specific Java
//     * type.
//     *
//     * @param parameterIndex The first parameter is 1, the second is 2, ...
//     * @param x The object containing the input parameter value
//     * @exception SQLException if a database-access error occurs.
//     */
//    public void setObject(int parameterIndex, Object x) throws SQLException {
//          m_PreparedStatement.setObject(parameterIndex, x);
//      }
//
//
//    /**
//     * Some prepared statements return multiple results; the execute
//     * method handles these complex statements as well as the simpler
//     * form of statements handled by executeQuery and executeUpdate.
//     *
//     * @exception SQLException if a database-access error occurs.
//     * @see Statement#execute
//     */
//    public boolean execute() throws SQLException {
//        return (m_PreparedStatement.execute());
//    }
//
//    /**
//     * Sets the designated parameter to the given
//     *  <code>Array</code> object.
//     * Sets an Array parameter.
//     *
//     * @param i the first parameter is 1, the second is 2, ...
//     * @param x an <code>Array</code> object that maps an SQL <code>ARRAY</code> value
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setArray(int i, Array x) throws SQLException {
//        m_PreparedStatement.setArray(i, x);
//    }
//
//    /**
//     * Gets the number, types and properties of a <code>ResultSet</code>
//     * object's columns.
//     *
//     * @return the description of a <code>ResultSet</code> object's columns
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public ResultSetMetaData getMetaData() throws SQLException {
//        return (m_PreparedStatement.getMetaData());
//    }
//
//    /**
//     * Sets the designated parameter to the given <code>java.sql.Date</code> value,
//     * using the given <code>Calendar</code> object.  The driver uses
//     * the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,
//     * which the driver then sends to the database.  With a
//     * a <code>Calendar</code> object, the driver can calculate the date
//     * taking into account a custom timezone.  If no
//     * <code>Calendar</code> object is specified, the driver uses the default
//     * timezone, which is that of the virtual machine running the application.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @param cal the <code>Calendar</code> object the driver will use
//     *            to construct the date
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setDate(int parameterIndex, java.sql.Date x, Calendar cal)
//            throws SQLException {
//        m_PreparedStatement.setDate(parameterIndex, x, cal);
//    }
//
//    /**
//     * Sets the designated parameter to the given <code>java.sql.Time</code> value,
//     * using the given <code>Calendar</code> object.  The driver uses
//     * the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,
//     * which the driver then sends to the database.  With a
//     * a <code>Calendar</code> object, the driver can calculate the time
//     * taking into account a custom timezone.  If no
//     * <code>Calendar</code> object is specified, the driver uses the default
//     * timezone, which is that of the virtual machine running the application.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @param cal the <code>Calendar</code> object the driver will use
//     *            to construct the time
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setTime(int parameterIndex, java.sql.Time x, Calendar cal)
//            throws SQLException {
//        m_PreparedStatement.setTime(parameterIndex, x, cal);
//    }
//
//    /**
//     * Sets the designated parameter to the given <code>java.sql.Timestamp</code> value,
//     * using the given <code>Calendar</code> object.  The driver uses
//     * the <code>Calendar</code> object to construct an SQL <code>TIMESTAMP</code> value,
//     * which the driver then sends to the database.  With a
//     * a <code>Calendar</code> object, the driver can calculate the timestamp
//     * taking into account a custom timezone.  If no
//     * <code>Calendar</code> object is specified, the driver uses the default
//     * timezone, which is that of the virtual machine running the application.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the parameter value
//     * @param cal the <code>Calendar</code> object the driver will use
//     *            to construct the timestamp
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setTimestamp(int parameterIndex, java.sql.Timestamp x, Calendar cal)
//            throws SQLException {
//        m_PreparedStatement.setTimestamp(parameterIndex, x, cal);
//    }
//
//    /**
//     * Sets the designated parameter to SQL <code>NULL</code>.
//     * This version of the method <code>setNull</code> should
//     * be used for user-defined types and REF type parameters.  Examples
//     * of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
//     * named array types.
//     *
//     * <P><B>Note:</B> To be portable, applications must give the
//     * SQL type code and the fully-qualified SQL type name when specifying
//     * a NULL user-defined or REF parameter.  In the case of a user-defined type
//     * the name is the type name of the parameter itself.  For a REF
//     * parameter, the name is the type name of the referenced type.  If
//     * a JDBC driver does not need the type code or type name information,
//     * it may ignore it.
//     *
//     * Although it is intended for user-defined and Ref parameters,
//     * this method may be used to set a null parameter of any JDBC type.
//     * If the parameter does not have a user-defined or REF type, the given
//     * typeName is ignored.
//     *
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param sqlType a value from <code>java.sql.Types</code>
//     * @param typeName the fully-qualified name of an SQL user-defined type;
//     *  ignored if the parameter is not a user-defined type or REF
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setNull(int paramIndex, int sqlType, String typeName)
//            throws SQLException {
//        m_PreparedStatement.setNull(paramIndex, sqlType, typeName);
//    }
//
//    /**
//     * Sets the designated parameter to the given
//     *  <code>Blob</code> object.
//     *
//     * @param i the first parameter is 1, the second is 2, ...
//     * @param x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setBlob(int i, Blob x) throws SQLException {
//        m_PreparedStatement.setBlob(i, x);
//    }
//
//
//    /**
//     * Sets the designated parameter to the given
//     *  <code>Clob</code> object.
//     *
//     * @param i the first parameter is 1, the second is 2, ...
//     * @param x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setClob(int i, Clob x) throws SQLException {
//        m_PreparedStatement.setClob(i, x);
//    }
//
//    /**
//     * Adds a set of parameters to this <code>PreparedStatement</code>
//     * object's batch of commands.
//     *
//     * @exception SQLException if a database access error occurs
//     * @see Statement#addBatch
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void addBatch() throws SQLException {
//        m_PreparedStatement.addBatch();
//    }
//
//    /**
//     * Sets the designated parameter to the given <code>Reader</code>
//     * object, which is the given number of characters long.
//     * When a very large UNICODE value is input to a <code>LONGVARCHAR</code>
//     * parameter, it may be more practical to send it via a
//     * <code>java.io.Reader</code> object. The data will be read from the stream
//     * as needed until end-of-file is reached.  The JDBC driver will
//     * do any necessary conversion from UNICODE to the database char format.
//     *
//     * <P><B>Note:</B> This stream object can either be a standard
//     * Java stream object or your own subclass that implements the
//     * standard interface.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param x the java reader which contains the UNICODE data
//     * @param length the number of characters in the stream
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setCharacterStream(int parameterIndex,
//                                   java.io.Reader reader,
//                                   int length) throws SQLException {
//        m_PreparedStatement.setCharacterStream(parameterIndex, reader, length);
//    }
//
//
//    /**
//     * Sets the designated parameter to the given
//     *  <code>REF(&lt;structured-type&gt;)</code> value.
//     *
//     * @param i the first parameter is 1, the second is 2, ...
//     * @param x an SQL <code>REF</code> value
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC
//     *      2.0 API</a>
//     */
//    public void setRef(int i, Ref x) throws SQLException {
//        m_PreparedStatement.setRef(i, x);
//    }
//
//    // +++++++++++++++++++++++++++++++++++++++++++++++++++++
//    // CallableStatement code
//    // +++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//    /**
//     * Before executing a stored procedure call, you must explicitly
//     * call registerOutParameter to register the java.sql.Type of each
//     * out parameter.
//     *
//     * <P><B>Note:</B> When reading the value of an out parameter, you
//     * must use the getXXX method whose Java type XXX corresponds to the
//     * parameter's registered SQL type.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2,...
//     * @param sqlType SQL type code defined by java.sql.Types;
//     * for parameters of type Numeric or Decimal use the version of
//     * registerOutParameter that accepts a scale value
//     * @exception SQLException if a database-access error occurs.
//     * @see Type
//     */
//    public void registerOutParameter(int parameterIndex, int sqlType)
//            throws SQLException {
//        m_CallableStatement.registerOutParameter(parameterIndex, sqlType);
//    }
//
//    /**
//     * Use this version of registerOutParameter for registering
//     * Numeric or Decimal out parameters.
//     *
//     * <P><B>Note:</B> When reading the value of an out parameter, you
//     * must use the getXXX method whose Java type XXX corresponds to the
//     * parameter's registered SQL type.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @param sqlType use either java.sql.Type.NUMERIC or java.sql.Type.DECIMAL
//     * @param scale a value greater than or equal to zero representing the
//     *              desired number of digits to the right of the decimal point
//     * @exception SQLException if a database-access error occurs.
//     * @see Type
//     */
//    public void registerOutParameter(int parameterIndex, int sqlType, int scale)
//            throws SQLException {
//        m_CallableStatement.registerOutParameter(parameterIndex, sqlType, scale);
//    }
//
//    /**
//     * An OUT parameter may have the value of SQL NULL; wasNull reports
//     * whether the last value read has this special value.
//     *
//     * <P><B>Note:</B> You must first call getXXX on a parameter to
//     * read its value and then call wasNull() to see if the value was
//     * SQL NULL.
//     *
//     * @return true if the last parameter read was SQL NULL
//     * @exception SQLException if a database-access error occurs.
//     */
//    public boolean wasNull() throws SQLException {
//        return (m_CallableStatement.wasNull());
//    }
//
//    /**
//     * Get the value of a CHAR, VARCHAR, or LONGVARCHAR parameter as a Java String.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is null
//     * @exception SQLException if a database-access error occurs.
//     */
//    public String getString(int parameterIndex) throws SQLException {
//         return (m_CallableStatement.getString(parameterIndex));
//     }
//
//    /**
//     * Get the value of a BIT parameter as a Java boolean.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is false
//     * @exception SQLException if a database-access error occurs.
//     */
//    public boolean getBoolean(int parameterIndex) throws SQLException {
//         return (m_CallableStatement.getBoolean(parameterIndex));
//     }
//
//
//    /**
//     * Get the value of a TINYINT parameter as a Java byte.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is 0
//     * @exception SQLException if a database-access error occurs.
//     */
//    public byte getByte(int parameterIndex) throws SQLException {
//        return (m_CallableStatement.getByte(parameterIndex));
//    }
//
//
//    /**
//     * Get the value of a SMALLINT parameter as a Java short.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is 0
//     * @exception SQLException if a database-access error occurs.
//     */
//    public short getShort(int parameterIndex) throws SQLException {
//        return (m_CallableStatement.getShort(parameterIndex));
//    }
//
//    /**
//     * Get the value of an INTEGER parameter as a Java int.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is 0
//     * @exception SQLException if a database-access error occurs.
//     */
//    public int getInt(int parameterIndex) throws SQLException {
//        return (m_CallableStatement.getInt(parameterIndex));
//    }
//
//    /**
//     * Get the value of a BIGINT parameter as a Java long.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is 0
//     * @exception SQLException if a database-access error occurs.
//     */
//    public long getLong(int parameterIndex) throws SQLException {
//        return (m_CallableStatement.getLong(parameterIndex));
//    }
//
//    /**
//     * Get the value of a FLOAT parameter as a Java float.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is 0
//     * @exception SQLException if a database-access error occurs.
//     */
//    public float getFloat(int parameterIndex) throws SQLException {
//        return (m_CallableStatement.getFloat(parameterIndex));
//    }
//
//    /**
//     * Get the value of a DOUBLE parameter as a Java double.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is 0
//     * @exception SQLException if a database-access error occurs.
//     */
//    public double getDouble(int parameterIndex) throws SQLException {
//        return (m_CallableStatement.getDouble(parameterIndex));
//    }
//
//    /**
//     * Get the value of a NUMERIC parameter as a java.math.BigDecimal object.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     *
//     * @param scale a value greater than or equal to zero representing the
//     * desired number of digits to the right of the decimal point
//     *
//     * @return the parameter value; if the value is SQL NULL, the result is
//     * null
//     * @exception SQLException if a database-access error occurs.
//     */
//    public BigDecimal getBigDecimal(int parameterIndex)
//            throws SQLException {
//        return (m_CallableStatement.getBigDecimal(parameterIndex));
//    }
//
//    /**
//     * Get the value of a SQL BINARY or VARBINARY parameter as a Java byte[]
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is null
//     * @exception SQLException if a database-access error occurs.
//     */
//    public byte[] getBytes(int parameterIndex) throws SQLException {
//         return (m_CallableStatement.getBytes(parameterIndex));
//     }
//
//
//    /**
//     * Get the value of a SQL DATE parameter as a java.sql.Date object
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is null
//     * @exception SQLException if a database-access error occurs.
//     */
//    public java.sql.Date getDate(int parameterIndex) throws SQLException {
//        return (m_CallableStatement.getDate(parameterIndex));
//    }
//
//    /**
//     * Get the value of a SQL TIME parameter as a java.sql.Time object.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is null
//     * @exception SQLException if a database-access error occurs.
//     */
//    public java.sql.Time getTime(int parameterIndex) throws SQLException {
//         return (m_CallableStatement.getTime(parameterIndex));
//     }
//
//    /**
//     * Get the value of a SQL TIMESTAMP parameter as a java.sql.Timestamp object.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2, ...
//     * @return the parameter value; if the value is SQL NULL, the result is null
//     * @exception SQLException if a database-access error occurs.
//     */
//    public java.sql.Timestamp getTimestamp(int parameterIndex)
//             throws SQLException {
//         return (m_CallableStatement.getTimestamp(parameterIndex));
//     }
//
//    //----------------------------------------------------------------------
//    // Advanced features:
//
//
//    /**
//     * Get the value of a parameter as a Java object.
//     *
//     * <p>This method returns a Java object whose type coresponds to the SQL
//     * type that was registered for this parameter using registerOutParameter.
//     *
//     * <p>Note that this method may be used to read
//     * datatabase-specific, abstract data types. This is done by
//     * specifying a targetSqlType of java.sql.types.OTHER, which
//     * allows the driver to return a database-specific Java type.
//     *
//     * @param parameterIndex The first parameter is 1, the second is 2, ...
//     * @return A java.lang.Object holding the OUT parameter value.
//     * @exception SQLException if a database-access error occurs.
//     * @see Types
//     */
//    public Object getObject(int parameterIndex) throws SQLException {
//        return (m_CallableStatement.getObject(parameterIndex));
//    }
//
//
//    /**
//     * Gets the value of a JDBC <code>TIME</code> parameter as a
//     * <code>java.sql.Time</code> object, using
//     * the given <code>Calendar</code> object
//     * to construct the time.
//     * With a <code>Calendar</code> object, the driver
//     * can calculate the time taking into account a custom timezone and locale.
//     * If no <code>Calendar</code> object is specified, the driver uses the
//     * default timezone and locale.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2,
//     * and so on
//     * @param cal the <code>Calendar</code> object the driver will use
//     *            to construct the time
//     * @return the parameter value; if the value is SQL <code>NULL</code>, the result is
//     * <code>null</code>.
//     * @exception SQLException if a database access error occurs
//     */
//    public java.sql.Time getTime(int parameterIndex, Calendar cal)
//            throws SQLException {
//        return (m_CallableStatement.getTime(parameterIndex, cal));
//    }
//
//    /**
//     * Gets the value of a JDBC <code>TIMESTAMP</code> parameter as a
//     * <code>java.sql.Timestamp</code> object, using
//     * the given <code>Calendar</code> object to construct
//     * the <code>Timestamp</code> object.
//     * With a <code>Calendar</code> object, the driver
//     * can calculate the timestamp taking into account a custom timezone and locale.
//     * If no <code>Calendar</code> object is specified, the driver uses the
//     * default timezone and locale.
//     *
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2,
//     * and so on
//     * @param cal the <code>Calendar</code> object the driver will use
//     *            to construct the timestamp
//     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result is
//     * <code>null</code>.
//     * @exception SQLException if a database access error occurs
//     */
//    public java.sql.Timestamp getTimestamp(int parameterIndex, Calendar cal)
//            throws SQLException {
//        return (m_CallableStatement.getTimestamp(parameterIndex, cal));
//    }
//
//
//    /**
//     *
//     * Registers the designated output parameter.  This version of
//     * the method <code>registerOutParameter</code>
//     * should be used for a user-named or REF output parameter.  Examples
//     * of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and
//     * named array types.
//     *
//     * Before executing a stored procedure call, you must explicitly
//     * call <code>registerOutParameter</code> to register the type from
//     * <code>java.sql.Types</code> for each
//     * OUT parameter.  For a user-named parameter the fully-qualified SQL
//     * type name of the parameter should also be given, while a REF
//     * parameter requires that the fully-qualified type name of the
//     * referenced type be given.  A JDBC driver that does not need the
//     * type code and type name information may ignore it.   To be portable,
//     * however, applications should always provide these values for
//     * user-named and REF parameters.
//     *
//     * Although it is intended for user-named and REF parameters,
//     * this method may be used to register a parameter of any JDBC type.
//     * If the parameter does not have a user-named or REF type, the
//     * typeName parameter is ignored.
//     *
//     * <P><B>Note:</B> When reading the value of an out parameter, you
//     * must use the <code>getXXX</code> method whose Java type XXX corresponds to the
//     * parameter's registered SQL type.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2,...
//     * @param sqlType a value from {@link java.sql.Types}
//     * @param typeName the fully-qualified name of an SQL structured type
//     * @exception SQLException if a database access error occurs
//     * @see Types
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC 2.0 API</a>
//     */
//    public void registerOutParameter(int paramIndex, int sqlType, String typeName)
//            throws SQLException {
//        m_CallableStatement.registerOutParameter(paramIndex, sqlType, typeName);
//    }
//
//    /**
//     *
//     * Returns an object representing the value of OUT parameter
//     * <code>i</code> and uses <code>map</code> for the custom
//     * mapping of the parameter value.
//     * <p>
//     * This method returns a Java object whose type corresponds to the
//     * JDBC type that was registered for this parameter using the method
//     * <code>registerOutParameter</code>.  By registering the target
//     * JDBC type as <code>java.sql.Types.OTHER</code>, this method can
//     * be used to read database-specific abstract data types.
//     * @param i the first parameter is 1, the second is 2, and so on
//     * @param map the mapping from SQL type names to Java classes
//     * @return a <code>java.lang.Object</code> holding the OUT parameter value
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC 2.0 API</a>
//     */
//    public Object getObject(int i, java.util.Map map) throws SQLException {
//        return (m_CallableStatement.getObject(i, map));
//    }
//
//
//    /**
//     *
//     * Gets the value of a JDBC <code>REF(&lt;structured-type&gt;)</code>
//     * parameter as a {@link Ref} object in the Java programming language.
//     * @param i the first parameter is 1, the second is 2,
//     * and so on
//     * @return the parameter value as a <code>Ref</code> object in the
//     * Java programming language.  If the value was SQL <code>NULL</code>, the value
//     * <code>null</code> is returned.
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC 2.0 API</a>
//     */
//    public Ref getRef(int i) throws SQLException {
//        return (m_CallableStatement.getRef(i));
//    }
//
//    /**
//     *
//     * Gets the value of a JDBC <code>BLOB</code> parameter as a
//     * {@link Blob} object in the Java programming language.
//     * @param i the first parameter is 1, the second is 2, and so on
//     * @return the parameter value as a <code>Blob</code> object in the
//     * Java programming language.  If the value was SQL <code>NULL</code>, the value
//     * <code>null</code> is returned.
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC 2.0 API</a>
//     */
//    public Blob getBlob(int i) throws SQLException {
//        return (m_CallableStatement.getBlob(i));
//    }
//
//    /**
//     *
//     * Gets the value of a JDBC <code>CLOB</code> parameter as a
//     * <code>Clob</code> object in the Java programming language.
//     * @param i the first parameter is 1, the second is 2, and
//     * so on
//     * @return the parameter value as a <code>Clob</code> object in the
//     * Java programming language.  If the value was SQL <code>NULL</code>, the
//     * value <code>null</code> is returned.
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC 2.0 API</a>
//     */
//    public Clob getClob(int i) throws SQLException {
//        return (m_CallableStatement.getClob(i));
//    }
//
//
//
//    /**
//     *
//     * Gets the value of a JDBC <code>ARRAY</code> parameter as an
//     * {@link Array} object in the Java programming language.
//     * @param i the first parameter is 1, the second is 2, and
//     * so on
//     * @return the parameter value as an <code>Array</code> object in
//     * the Java programming language.  If the value was SQL <code>NULL</code>, the
//     * value <code>null</code> is returned.
//     * @exception SQLException if a database access error occurs
//     * @since 1.2
//     * @see <a href="package-summary.html#2.0 API">What Is in the JDBC 2.0 API</a>
//     */
//    public Array getArray(int i) throws SQLException {
//         return (m_CallableStatement.getArray(i));
//     }
//     /**
//     * Gets the value of a JDBC <code>DATE</code> parameter as a
//     * <code>java.sql.Date</code> object, using
//     * the given <code>Calendar</code> object
//     * to construct the date.
//     * With a <code>Calendar</code> object, the driver
//     * can calculate the date taking into account a custom timezone and locale.
//     * If no <code>Calendar</code> object is specified, the driver uses the
//     * default timezone and locale.
//     *
//     * @param parameterIndex the first parameter is 1, the second is 2,
//     * and so on
//     * @param cal the <code>Calendar</code> object the driver will use
//     *            to construct the date
//     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result is
//     * <code>null</code>.
//     * @exception SQLException if a database access error occurs
//     */
//    public java.sql.Date getDate(int parameterIndex, Calendar cal)
//            throws SQLException {
//        return (m_CallableStatement.getDate(parameterIndex, cal));
//    }
//
//
//    /**
//     * Gets the value of a JDBC <code>NUMERIC</code> parameter as a
//     * <code>java.math.BigDecimal</code> object with scale digits to
//     * the right of the decimal point.
//     * @param parameterIndex the first parameter is 1, the second is 2,
//     * and so on
//     * @param scale the number of digits to the right of the decimal point
//     * @return the parameter value.  If the value is SQL <code>NULL</code>, the result is
//     * <code>null</code>.
//     * @exception SQLException if a database access error occurs
//     * @deprecated
//     */
//    public BigDecimal getBigDecimal(int parameterIndex, int scale)
//             throws SQLException {
//         return (m_CallableStatement.getBigDecimal(parameterIndex, scale));
//     }
//
//     //JDBC3 Stuff
//    // Disabled for now
//    /*
//    public double getDouble(String parameterIndex) throws SQLException {
//        return (m_CallableStatement.getDouble(parameterIndex));
//    }
//    public float getFloat(String parameterIndex) throws SQLException {
//        return (m_CallableStatement.getFloat(parameterIndex));
//    }
//      public long getLong(String parameterIndex) throws SQLException {
//        return (m_CallableStatement.getLong(parameterIndex));
//    }
//     public short getShort(String parameterIndex) throws SQLException {
//        return (m_CallableStatement.getShort(parameterIndex));
//    }
//      public byte getByte(String parameterIndex) throws SQLException {
//        return (m_CallableStatement.getByte(parameterIndex));
//    }
//    public String getString(String parameterIndex) throws SQLException {
//         return (m_CallableStatement.getString(parameterIndex));
//     }
//    public void setCharacterStream(String parameterIndex,
//                                    java.io.Reader reader,
//                                    int length) throws SQLException {
//         m_CallableStatement.setCharacterStream(parameterIndex, reader, length);
//     }
//     public boolean getBoolean(String parameterIndex) throws SQLException {
//         return (m_CallableStatement.getBoolean(parameterIndex));
//     }
//
//     public BigDecimal getBigDecimal(String parameterIndex)
//             throws SQLException {
//         return (m_CallableStatement.getBigDecimal(parameterIndex));
//     }
//
//
//    public void setURL(int i,URL u) throws SQLException {
//         m_CallableStatement.setURL(i,u);
//     }
//    public void setURL(String i,URL u) throws SQLException {
//          m_CallableStatement.setURL(i,u);
//      }
//    public void setNull(String i,int u) throws SQLException {
//          m_CallableStatement.setNull(i,u);
//      }
//    public void setBoolean(String i,boolean u) throws SQLException {
//           m_CallableStatement.setBoolean(i,u);
//       }
//    public void setByte(String i,byte u) throws SQLException {
//           m_CallableStatement.setByte(i,u);
//       }
//    public void setShort(String i,short u) throws SQLException {
//            m_CallableStatement.setShort(i,u);
//        }
//    public void setInt(String i,int u) throws SQLException {
//            m_CallableStatement.setInt(i,u);
//        }
//    public void setLong(String i,long u) throws SQLException {
//            m_CallableStatement.setLong(i,u);
//        }
//    public void setFloat(String i,float u) throws SQLException {
//             m_CallableStatement.setFloat(i,u);
//         }
//    public void setDouble(String i,double u) throws SQLException {
//             m_CallableStatement.setDouble(i,u);
//         }
//    public void setBigDecimal(String i,BigDecimal u) throws SQLException {
//              m_CallableStatement.setBigDecimal(i,u);
//          }
//    public void setString(String i,String u) throws SQLException {
//              m_CallableStatement.setString(i,u);
//          }
//    public void setBytes(String i,byte[] u) throws SQLException {
//              m_CallableStatement.setBytes(i,u);
//          }
//    public void setDate(String i,Date u) throws SQLException {
//              m_CallableStatement.setDate(i,u);
//          }
//    public void setDate(String i,Date u,Calendar c) throws SQLException {
//              m_CallableStatement.setDate(i,u,c);
//          }
//    public void setTime(String i,Time u,Calendar c) throws SQLException {
//              m_CallableStatement.setTime(i,u,c);
//          }
//    public void setTime(String i,Time u) throws SQLException {
//              m_CallableStatement.setTime(i,u);
//          }
//    public void setTimestamp(String i,Timestamp u) throws SQLException {
//               m_CallableStatement.setTimestamp(i,u);
//     }
//    public void setTimestamp(String i,Timestamp u,Calendar c) throws SQLException {
//               m_CallableStatement.setTimestamp(i,u,c);
//     }
//    public void setObject(String parameterIndex, Object x) throws SQLException {
//          m_CallableStatement.setObject(parameterIndex, x);
//      }
//    public void setObject(String parameterIndex, Object x,int i) throws SQLException {
//          m_CallableStatement.setObject(parameterIndex, x,i);
//      }
//    public void setObject(String parameterIndex, Object x, int targetSqlType, int scale)
//              throws SQLException {
//          m_CallableStatement.setObject(parameterIndex, x, targetSqlType, scale);
//      }
//    public void setBinaryStream(String parameterIndex, java.io.InputStream x, int length)
//              throws SQLException {
//          m_CallableStatement.setBinaryStream(parameterIndex, x, length);
//      }
//     public void setAsciiStream(String parameterIndex, java.io.InputStream x, int length)
//              throws SQLException {
//          m_CallableStatement.setAsciiStream(parameterIndex, x, length);
//      }
//    public URL getURL(int i) throws SQLException {
//        return(m_CallableStatement.getURL(i));
//    }
//    public URL getURL(String i) throws SQLException {
//        return(m_CallableStatement.getURL(i));
//    }
//
//    public ParameterMetaData getParameterMetaData() throws SQLException {
//        return(m_CallableStatement.getParameterMetaData());
//    }
//    public void registerOutParameter(String s,int i) throws SQLException {
//         m_CallableStatement.registerOutParameter(s,i);
//     }
//    public void registerOutParameter(String s,int i,int i2) throws SQLException {
//         m_CallableStatement.registerOutParameter(s,i,i2);
//     }
//    public void registerOutParameter(String s,int i,String i2) throws SQLException {
//         m_CallableStatement.registerOutParameter(s,i,i2);
//     }
//    public int getResultSetHoldability()
//            throws SQLException {
//        return (m_CallableStatement.getResultSetHoldability());
//    }
//
//    public boolean getMoreResults(int c) throws SQLException {
//        return (m_Statement.getMoreResults(c));
//    }
//
//     public ResultSet getGeneratedKeys() throws SQLException {
//        return (m_Statement.getGeneratedKeys());
//    }
//   public int executeUpdate(String s,int[] i) throws SQLException {
//        return (m_PreparedStatement.executeUpdate(s,i));
//    }
//    public int executeUpdate(String s,int i) throws SQLException {
//        return (m_PreparedStatement.executeUpdate(s,i));
//    }
//     public int executeUpdate(String s,String[] i) throws SQLException {
//        return (m_PreparedStatement.executeUpdate(s,i));
//    }
//
//       public boolean execute(String s,int[] i) throws SQLException {
//        return (m_PreparedStatement.execute(s,i));
//    }
//    public boolean execute(String s,int i) throws SQLException {
//        return (m_PreparedStatement.execute(s,i));
//    }
//     public boolean execute(String s,String[] i) throws SQLException {
//        return (m_PreparedStatement.execute(s,i));
//    }
//
//    public void setNull(String parameterIndex, int sqlType,String s) throws SQLException {
//        m_CallableStatement.setNull(parameterIndex, sqlType,s);
//    }
//     public Clob getClob(String i) throws SQLException {
//        return (m_CallableStatement.getClob(i));
//    }
//    public Array getArray(String i) throws SQLException {
//          return (m_CallableStatement.getArray(i));
//      }
//     public java.sql.Date getElement(String parameterIndex, Calendar cal)
//             throws SQLException {
//         return (m_CallableStatement.getElement(parameterIndex, cal));
//     }
//    public java.sql.Timestamp getTimestamp(String parameterIndex)
//             throws SQLException {
//         return (m_CallableStatement.getTimestamp(parameterIndex));
//     }
//    public java.sql.Timestamp getTimestamp(String parameterIndex,Calendar c)
//             throws SQLException {
//         return (m_CallableStatement.getTimestamp(parameterIndex,c));
//     }
//     public java.sql.Time getTime(String parameterIndex) throws SQLException {
//         return (m_CallableStatement.getTime(parameterIndex));
//     }
//    public java.sql.Time getTime(String parameterIndex,Calendar c) throws SQLException {
//         return (m_CallableStatement.getTime(parameterIndex,c));
//     }
//     public java.sql.Date getElement(String parameterIndex) throws SQLException {
//        return (m_CallableStatement.getElement(parameterIndex));
//    }
//     public byte[] getBytes(String parameterIndex) throws SQLException {
//         return (m_CallableStatement.getBytes(parameterIndex));
//     }
//    public int getInt(String parameterIndex) throws SQLException {
//         return (m_CallableStatement.getInt(parameterIndex));
//     }
//         public Blob getBlob(String i) throws SQLException {
//        return (m_CallableStatement.getBlob(i));
//    }
//    public Ref getRef(String i) throws SQLException {
//        return (m_CallableStatement.getRef(i));
//    }
//     public Object getObject(String i, java.util.Map map) throws SQLException {
//        return (m_CallableStatement.getObject(i, map));
//    }
//     public Object getObject(String parameterIndex) throws SQLException {
//        return (m_CallableStatement.getObject(parameterIndex));
//    }
//
//*/
//
//}
